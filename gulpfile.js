'use strict';

// Native dependencies
var path        = require('path');
var exec        = require('child_process').exec;

// External dependencies
var gulp        = require('gulp-help')(require('gulp'));
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');
var through2    = require('through2');
var del         = require('del');
var watchify    = require('watchify');
var browserify  = require('browserify');
var vinylSource = require('vinyl-source-stream');
var vinylBuffer = require('vinyl-buffer');
var _           = require('lodash');
var polybuild   = require('polybuild');

// Load all installed gulp plugins into $
var $           = require('gulp-load-plugins')();

// Constants
var SRC_DIR     = 'src';
var STAGE_DIR   = 'stage';
var DIST_DIR    = 'dist';
var MAPS_DIR    = 'source-maps';

var JS_DIR = [
    SRC_DIR + '/**/*.js',
    '!' + SRC_DIR + '/**/*.bundle.js',
    '!' + SRC_DIR + '/bower_components/**/*',
    '!' + SRC_DIR + '/sandbox/**/*',
    'gulpfile.js',
];

var LESS_DIR = [
    SRC_DIR + '/**/*.less',
    '!' + SRC_DIR + '/bower_components/**/*',
];

var CSS_DIR = [
    SRC_DIR + '/**/*.css',
    '!' + SRC_DIR + '/bower_components/**/*',
];

var HTML_DIR = [
    SRC_DIR + '/**/*.html',
    '!' + SRC_DIR + '/bower_components/**/*',
];

/////////////
// helpers //
/////////////

var jsRe = /.+\.js$/;
var htmlRe = /.+\.html$/;

var H = {

    /**
     * Converts a browserify stream into a gulp friendly vinyl stream
     */
    vinylifyBrowserify: function (b) {
        return b.bundle()
            // log errors if they happen
            .on('error', $.util.log.bind($.util, 'Browserify Error'))
            .pipe(vinylSource('index.bundle.js'))
            // optional, remove if you don't need to buffer file contents
            .pipe(vinylBuffer());
    },

    isJs: function (file) {
        return jsRe.test(file.path);
    },

    isHtml: function (file) {
        return htmlRe.test(file.path);
    },

    fmtStrLength: function (str, length) {

        while (str.length < length) {
            str += ' ';
        }

        return str;
    },

};

/////////////
// helpers //
/////////////

///////////
// build //
///////////

/**
 * Task for less.
 */
gulp.task('less', function () {

    // Message to be prepended to all .css files generated via less
    var message = [
        '/*-----------------------------------------------------',
        ' | This file was generated by LESS.                   |',
        ' | All modifications to it will be lost, mercilessly! |',
        ' -----------------------------------------------------*/\n\n',
    ].join('\n');

    return gulp.src(LESS_DIR)
        // .pipe($.changed(SRC_DIR, { extension: '.css' }))
        .pipe($.sourcemaps.init())
            .pipe($.less())
            .on('error', $.notify.onError({
                title: 'Less compiling error',
                message: '<%= error.message %>',
                open: 'file:///<%= error.filename %>',
                sound: 'Glass',
                // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
                // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
                icon: path.join(__dirname, 'logo.png'),
            }))
            .pipe($.autoprefixer({
                browsers: [
                    'ie >= 10',
                    'ie_mob >= 10',
                    'ff >= 30',
                    'chrome >= 34',
                    'safari >= 7',
                    'opera >= 23',
                    'ios >= 7',
                    'android >= 4.4',
                    'bb >= 10'
                ],
                cascade: false,
            }))
            .pipe($.header(message))
        .pipe($.sourcemaps.write(MAPS_DIR))
        // Put files at source dir in order to use them for vulcanization
        .pipe(gulp.dest(SRC_DIR))
        .pipe($.size({
            title: 'less',
            showFiles: false
        }));
});

/**
 * Runs the javascript task once
 */
gulp.task('javascript', 'Builds up the javascript file', function () {

    // Message to be prepended to all .js files generated via less
    var message = [
        '/*-----------------------------------------------------',
        ' | This file was generated by Browserify.             |',
        ' | All modifications to it will be lost, mercilessly! |',
        ' -----------------------------------------------------*/\n\n',
    ].join('\n');

    return H.vinylifyBrowserify(browserify(BROWSERIFY_OPTIONS))
        // optional, remove if you dont want sourcemaps
        .pipe($.sourcemaps.init({ loadMaps: true })) // loads map from browserify file
            // calculate size before writing source maps
            .pipe($.size({ title: 'javascript' }))
        // Add transformation tasks to the pipeline here.
        .pipe($.sourcemaps.write(MAPS_DIR)) // writes .map file
        .pipe($.header(message))
        .pipe(gulp.dest(SRC_DIR));
});

/**
 * Vulcanize polymer components (use polybuild instead)
 */
// gulp.task('vulcanize', function () {
//     return gulp.src(SRC_DIR + '/elements.html')
//         .pipe($.vulcanize({
//             stripComments: true,
//             inlineCss: true,
//             inlineScripts: true,
//         }))
//         .pipe(gulp.dest(DIST_DIR))
//         .pipe($.size({title: 'vulcanize'}));
// });

gulp.task('build:stage', 'Bundles all assets into files ready for stage-deployment', ['less', 'javascript'], function () {

    return gulp.src(SRC_DIR + '/index.html')
        // maximumCrush should uglify the js
        .pipe(polybuild({ maximumCrush: true }))
        .pipe($.size({
            title: 'build:stage',
            showFiles: true,
            gzip: true
        }))
        .pipe(gulp.dest(STAGE_DIR));

});

gulp.task('build', 'Prepare dist', ['build:stage'], function () {

    var stageFiles = [
        STAGE_DIR + '/index.build.html',
        STAGE_DIR + '/index.build.js',
    ];

    return gulp.src(stageFiles, { baseDir: STAGE_DIR })
        // remove debugging (debugger, console.*, alert)
        .pipe($.if(H.isJs, $.stripDebug()))
        .pipe($.size({
            title: 'build',
            showFiles: true,
            gzip: true
        }))
        .pipe(gulp.dest(DIST_DIR));
});

/**
 * Browserify
 */
var BROWSERIFY_OPTIONS = _.assign({}, watchify.args, {
    entries: ['./src/index.js'],
    debug: true,
    standalone: 'C',
});

///////////
// build //
///////////

/////////////
// backend //
/////////////

// Starts the mock server
gulp.task('dev:backend', 'Setup backend for development', function () {

});

/////////////
// backend //
/////////////

/////////////////
// development //
/////////////////

/**
 * Compiles todos throughout the source code
 */
gulp.task('dev:todo', 'Retrieve all todos to TODO.md file', function () {
    return gulp.src(JS_DIR.concat(LESS_DIR).concat(HTML_DIR))
        .pipe($.todo({
            reporter: 'markdown',
        }))
        .pipe(gulp.dest(''));
});

/**
 * Serves the application client
 */
gulp.task('serve:src', 'Serve the source code (for development)', ['dev:backend'], function () {

    var bs = browserSync({
        port: 4000,
        server: {
            baseDir: 'src',
        },
        open: true,
        // tunnel: true
    });

    function notifyIsSrcServer() {
        bs.notify('<b>/src</b>', 3000);
    }

    bs.emitter.on('client:connected', notifyIsSrcServer);
});

/**
 * Serves the application client
 */
gulp.task('serve:stage', 'Serve the staging environment', ['dev:backend'], function () {

    var bs = browserSync({
        port: 4001,
        server: {
            baseDir: 'stage',
            index: 'index.build.html'
        },
        serveStatic: [SRC_DIR + '/' + MAPS_DIR],
        open: true,
    });

    function notifyIsStagingServer() {
        bs.notify('<b>/stage</b>', 3000);
    }

    bs.emitter.on('client:connected', notifyIsStagingServer);
    // setTimeout(notifyIsStagingServer, 3000);
});

/**
 * Serves the application client
 */
gulp.task('serve:dist', 'Serve the distribution environment', ['dev:backend'], function () {

    var bs = browserSync({
        port: 4002,
        server: {
            baseDir: 'dist',
            index: 'index.build.html'
        },
        open: true,
    });

    function notifyIsDistServer() {
        bs.notify('<b>/dist</b>', 3000);
    }

    bs.emitter.on('client:connected', notifyIsDistServer);
});

/**
 * Watches files for changes and acts accordingly
 */
gulp.task('watch', 'Watch files for changes and reload servers', function () {

    // Message to be prepended to all .js files generated via less
    var message = [
        '/*-----------------------------------------------------',
        ' | This file was generated by Browserify.             |',
        ' | All modifications to it will be lost, mercilessly! |',
        ' -----------------------------------------------------*/\n\n',
    ].join('\n');

    // JS 
    gulp.watch(JS_DIR, ['jshint', 'jscs']);

    // Instantiate watchify
    var w = watchify(browserify(BROWSERIFY_OPTIONS));

    w.on('update', watchifyBundle); // on any dep update, runs the bundler
    w.on('log', $.util.log); // output build logs to terminal

    /**
     * Bundles browserify stack using watchify
     */
    function watchifyBundle() {
        return H.vinylifyBrowserify(w)
            // optional, remove if you dont want sourcemaps
            .pipe($.sourcemaps.init({ loadMaps: true })) // loads map from browserify file
                .on('end', browserSync.reload)
            .pipe($.sourcemaps.write(MAPS_DIR)) // writes .map file
            .pipe($.header(message))
            .pipe(gulp.dest(SRC_DIR))
            .pipe($.size({ title: 'javascript' }));
    }

    // HTML & web-components
    gulp.watch(HTML_DIR, ['jshint', 'jscs'])
        .on('change', browserSync.reload);

    // LESS
    gulp.watch(LESS_DIR, ['less'])
        .on('change', function (event) {
            if (event.type === 'deleted') {

                var p = path.parse(event.path);
                var css = p.dir + '/' + p.name + '.css';

                // Remove css file
                del(css);
            }
        });
    gulp.watch(CSS_DIR)
        .on('change', browserSync.reload);

    // Invoke watchify bundle once to start watching files
    // and return the stream in order to prevent subsequent
    // tasks from continuing without the browserify being complete
    // (crappish gulp+browserify+watchify integration)
    return watchifyBundle();
});

/**
 * Runs all tasks for development environment setup and go
 */
gulp.task('develop', 'Set up development environment. If you are in doubt, try this one ;)', function (done) {
    // First compile less, run backend and watch 
    // then serve.
    runSequence(['less', 'javascript'], 'serve:src', 'watch', done);
});

/////////////////
// development //
/////////////////

//////////////////
// code quality //
//////////////////

/**
 * Runs jshint against the code from scripts and webcomponents
 */
gulp.task('jshint', 'Checks javascript code for possible errors', function () {

    var reporter = through2.obj(
        function (file, encoding, cb) {

            if (!file.jshint.success) {

                var err = new $.util.PluginError('jshint', {
                    message: 'JSHint failed at ' + file.path
                });

                // Store the path for later usage 
                err.path = file.path;

                // store errrors
                this.errors = this.errors || [];
                this.errors.push(err);
            }

            // continue stream
            cb(null, file);

        }, 
        function (cb) {

            if (this.errors && this.errors.length > 0) {
                cb(this.errors.pop());
            } else {
                $.util.log($.util.colors.green('JSHint passed with success :)'));
            }
        }
    );

    return gulp.src(JS_DIR.concat(HTML_DIR))
        .pipe($.jshint.extract('auto'))
        .pipe($.jshint('.jshintrc'))
        .pipe($.jshint.reporter(require('jshint-stylish')))
        .pipe(reporter)
        .on('error', $.notify.onError({
            title: 'JSHint check error',
            message: '<%= error.message %>',
            open: 'file:///<%= error.path %>',
            sound: 'Glass',
            // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
            // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
            icon: path.join(__dirname, 'logo.png'),
        }));
});

/**
 * Runs jscs against scripts. Todo: extract js from web componetns as well.
 */
gulp.task('jscs', 'Checks your javascript code for style errors', function () {

    gulp.src(JS_DIR, { base: '.' })
        .pipe($.jscs({
            configPath: '.jscsrc',
        }))
        .on('error', $.notify.onError({
            title: 'JSCS style check error',
            message: '<%= error.message %>',
            open: 'file:///<%= error.filename %>',
            sound: 'Glass',
            // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
            // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
            icon: path.join(__dirname, 'logo.png'),
        }));
});

//////////////////
// code quality //
//////////////////

// do not shot at help list
gulp.task('default', false, ['help'], function () {
    console.log('\nRun ' + $.util.colors.white.bgGreen('gulp develop') + ' if you are lost :)\n');
});
