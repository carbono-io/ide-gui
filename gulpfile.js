'use strict';

// Native dependencies
var path        = require('path');
var exec        = require('child_process').exec;

// External dependencies
var gulp        = require('gulp');
var browserSync = require('browser-sync');

// Load all installed gulp plugins into $
var $           = require('gulp-load-plugins')();

// Constants
var SRC_DIR     = './src';
var DIST_DIR    = './dist';

var JS_DIR = [
    SRC_DIR + '/**/*.js',
    '!' + SRC_DIR + '/bower_components/**/*',
    'gulpfile.js',
];

var LESS_DIR = [
    SRC_DIR + '/**/*.less',
    '!' + SRC_DIR + '/bower_components/**/*',
];

var CSS_DIR = [
    SRC_DIR + '/**/*.css',
    '!' + SRC_DIR + '/bower_components/**/*',
];

var HTML_DIR = [
    SRC_DIR + '/**/*.html',
    '!' + SRC_DIR + '/bower_components/**/*',
];

/**
 * Task for less.
 */
function _less() {

    // Message to be prepended to all .css files generated via less
    var message = [
        '/*-----------------------------------------------------',
        ' | This file was generated by LESS.                   |',
        ' | All modifications to it will be lost, mercilessly! |',
        ' -----------------------------------------------------*/\n\n',
    ].join('\n');

    return gulp.src(LESS_DIR)
        .pipe($.changed(SRC_DIR, { extension: '.css' }))
        .pipe($.duration('Compiling .less files'))
        .pipe($.less())
        .on('error', $.notify.onError({
            title: 'Less compiling error',
            message: '<%= error.message %>',
            open: 'file:///<%= error.filename %>',
            sound: 'Glass',
            // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
            // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
            icon: path.join(__dirname, 'logo.png'),
        }))
        .pipe($.autoprefixer({
            browsers: ['last 2 version'],
            cascade: false,
        }))
//        .pipe($.minifyCss())
        .pipe($.header(message))
        // Put files at source dir in order to use them for vulcanization
        .pipe(gulp.dest(SRC_DIR))
        .pipe(gulp.dest(DIST_DIR))
        .pipe($.size({ title: 'less' }));
}

/**
 * Function for vulcanize task
 */
function _vulcanize() {
    return gulp.src(SRC_DIR + '/elements/elements.html')
        .pipe($.vulcanize({
            stripComments: true,
            inlineCss: true,
            inlineScripts: true,
        }))
        .pipe(gulp.dest(DIST_DIR + '/elements'))
        .pipe($.size({title: 'vulcanize'}));
}

// Register tasks
gulp.task('less', _less);
gulp.task('vulcanize', ['less'], _vulcanize);
gulp.task('distribute', ['vulcanize']);

// Beautifiers
gulp.task('beautify-html', function () {
    gulp.src(HTML_DIR)
        .pipe($.jsbeautifier({indentSize: 4}))
        .pipe(gulp.dest('./tmp'));
});


function _todo() {
    gulp.src(JS_DIR.concat(LESS_DIR).concat(HTML_DIR))
        .pipe($.todo({
            reporter: 'markdown',
        }))
        .pipe(gulp.dest('./'));
}
gulp.task('todo', _todo);

// Develop task
gulp.task('serve', function () {

    browserSync({
        port: 4000,
        server: {
            baseDir: './src',
        },
        open: true,
    });
});

gulp.task('watch', function () {

    // Watch files for changes
    // Using gulp-watch plugin because the default gulp.watch method does
    // not watch for newly added files. Porbably must revise soon.
    // http://stackoverflow.com/questions/22391527/
    // gulps-gulp-watch-not-triggered-for-new-or-deleted-files
    $.watch(LESS_DIR, _less);
    $.watch(JS_DIR.concat(CSS_DIR).concat(HTML_DIR), function () {
        browserSync.reload();
        _todo();
    });
});

// Starts the mock server
gulp.task('mock-server', function () {

    var mockServerModulePath = path.join(__dirname, 'node_modules/carbono-mocks');

    // Consign uses `process.cwd()`, which fucks stuff up.
    // `cd` into the dir before starting module up
    exec('cd ' + mockServerModulePath + ' && node .', function (err, stdout, stderr) {

        if (!err) {
            // No error on mock server
            $.util.log($.util.colors.green('mock server running'));
            $.util.log($.util.colors.green(stdout));
        } else {
            // Error on mock server startup
            $.util.log($.util.colors.red('mock server startup problems'));
            $.util.log($.util.colors.red(stderr));
        }
    });
});

gulp.task('develop', ['less', 'mock-server', 'serve', 'watch']);


// Code style and quality checks
function _jshint() {

    return gulp.src(JS_DIR)
        .pipe($.jshint('.jshintrc'))
        .pipe($.jshint.reporter(require('jshint-stylish')))
        .pipe($.jshint.reporter('fail'))
        .on('error', $.notify.onError({
            title: 'JSHint check error',
            message: '<%= error.message %>',
            open: 'file:///<%= error.filename %>',
            sound: 'Glass',
            // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
            // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
            icon: path.join(__dirname, 'logo.png'),
        }));
}
gulp.task('jshint', _jshint);

gulp.task('jscs', function () {

    gulp.src(JS_DIR)
        .pipe($.jscs('.jscsrc'))
        .on('error', $.notify.onError({
            title: 'JSCS style check error',
            message: '<%= error.message %>',
            open: 'file:///<%= error.filename %>',
            sound: 'Glass',
            // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
            // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
            icon: path.join(__dirname, 'logo.png'),
        }));
});

gulp.task('jsdoc', function () {
    gulp.src(JS_DIR)
        .pipe($.jsdoc.parser())
        .pipe($.jsdoc.generator('./docs'));
});
