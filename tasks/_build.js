var path = require('path');

var _           = require('lodash');
var mergeStream = require('merge-stream');
var browserify  = require('browserify');
var vinylSource = require('vinyl-source-stream');
var vinylBuffer = require('vinyl-buffer');
var polybuild   = require('polybuild');

var config  = require('./config');
var aux = require('./auxiliary');

// Entries that need browserifying
var BROWSERIFY_ENTRIES = [
    config.srcDir + '/index.js',
    config.srcDir + '/elements/canvas/canvas.js'
];

module.exports = function (gulp, $) {

    /**
     * Task for less.
     */
    gulp.task('less', function () {

        // UNGLYYY
        // TODO: MAKE THE RIGHT WAY
        function isNotIndexCss(file) {
            return path.basename(file.path, '.css') !== 'index';
        }

        // Message to be prepended to all .css files generated via less
        var message = [
            '/*-----------------------------------------------------',
            ' | This file was generated by LESS.                   |',
            ' | All modifications to it will be lost, mercilessly! |',
            ' -----------------------------------------------------*/\n\n',
        ].join('\n');

        return gulp.src(config.lessDir)
            // .pipe($.changed(config.srcDir, { extension: '.css' }))
            // .pipe($.sourcemaps.init())
                .pipe($.less())
                .on('error', $.notify.onError({
                    title: 'Less compiling error',
                    message: '<%= error.message %>',
                    open: 'file:///<%= error.filename %>',
                    sound: 'Glass',
                    // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
                    // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
                    icon: path.join(config.root, 'logo.png'),
                }))
                .pipe($.autoprefixer({
                    browsers: [
                        'ie >= 10',
                        'ie_mob >= 10',
                        'ff >= 30',
                        'chrome >= 34',
                        'safari >= 7',
                        'opera >= 23',
                        'ios >= 7',
                        'android >= 4.4',
                        'bb >= 10'
                    ],
                    cascade: false,
                }))
                // .pipe($.header(message))
            .pipe($.if(isNotIndexCss, $.polymerizeCss({
                styleId: function (file) {
                    var basename = path.basename(file.path, '.css');

                    return basename + '-styles';
                }
            })))
            .pipe($.if(isNotIndexCss, $.rename(function (path) {
                path.basename += '-styles';
                path.extname = '.html';
            })))
            // .pipe($.sourcemaps.write(config.mapsDir))
            // Put files at source dir in order to use them for vulcanization
            .pipe(gulp.dest(config.srcDir))
            .pipe($.size({
                title: 'less',
                showFiles: false
            }));
    });

    /**
     * Runs the javascript task once
     */
    gulp.task('javascript', 'Builds up the javascript file', function () {

        // Message to be prepended to all .js files generated via less
        var message = [
            '/*-----------------------------------------------------',
            ' | This file was generated by Browserify.             |',
            ' | All modifications to it will be lost, mercilessly! |',
            ' -----------------------------------------------------*/\n\n',
        ].join('\n');

        // RegExp for matching srcDir
        var srcDirRegExp = new RegExp('^' + config.srcDir + '/');

        // Loop through all entries that should be browserified
        var browserifyTasks = BROWSERIFY_ENTRIES.map(function (entry) {

            // One config for each browserify task
            var entryConfig = {
                // Set the entry option so that it browserifies
                // only one file
                entries: [entry]
            };

            // Build a file path for writing the resulting
            // browserified file
            var gulpEntryFilePath = entry.replace(srcDirRegExp, '') + '.bundle.js';

            // Create a gulp stream for the single browserify task
            return browserify(entryConfig).bundle()
                // log errors if they happen
                .on('error', $.util.log.bind($.util, 'Browserify Error'))
                // transform browserify file stream into a vinyl file object stream
                // and modify the file name
                .pipe(vinylSource(gulpEntryFilePath))
                // transform vinyl stream into buffer so that sourcemaps may work
                .pipe(vinylBuffer())
                // optional, remove if you dont want sourcemaps
                .pipe($.sourcemaps.init({ loadMaps: true })) // loads map from browserify file
                    // calculate size before writing source maps
                    .pipe($.size({
                        title: 'javascript',
                        showFiles: true
                    }))
                // Add transformation tasks to the pipeline here.
                .pipe($.sourcemaps.write(config.mapsDir)) // writes .map file
                .pipe($.header(message))
                // write to root, as the files contain './src' reference
                .pipe(gulp.dest(config.srcDir)); 
        });

        // Return a merged stream object
        // that delays until all browserifyTasks are done
        return mergeStream(browserifyTasks);
    });

    gulp.task('build:stage', 'Bundles all assets into files ready for stage-deployment', ['less', 'javascript'], function () {

        return gulp.src(config.srcDir + '/index.html')
            // maximumCrush should uglify the js
            .pipe(polybuild({ maximumCrush: true }))
            .pipe($.size({
                title: 'build:stage',
                showFiles: true,
                gzip: true
            }))
            .pipe(gulp.dest(config.stageDir));

    });

    gulp.task('build', 'Prepare dist', ['build:stage'], function () {

        var stageFiles = [
            config.stageDir + '/index.build.html',
            config.stageDir + '/index.build.js',
        ];

        return gulp.src(stageFiles, { baseDir: config.stageDir })
            // remove debugging (debugger, console.*, alert)
            .pipe($.if(aux.isJs, $.stripDebug()))
            .pipe($.size({
                title: 'build',
                showFiles: true,
                gzip: true
            }))
            .pipe(gulp.dest(config.distDir));
    });
};