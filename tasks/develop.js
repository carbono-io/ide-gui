var path = require('path');
var exec = require('child_process').exec;

// External
var browserSync = require('browser-sync');
var browserify  = require('browserify');
var watchify    = require('watchify');
var runSequence = require('run-sequence');

var config = require('./config');
var aux = require('./auxiliary');

module.exports = function (gulp, $, emitter) {

    /**
     * Starts the code-machine code-machine for development purposes
     */
    gulp.task('serve:code-machine', 'Start code-machine for development', function () {

        $.util.log($.util.colors.red('Buggish. Not working yet, please start the process manually by running: `cd tmp/code-machine`, `export NODE_ENV=ide` and `node .` sequentially'));

        // Execute 
        // var cmProcess = exec('node .', {
        //     cwd: path.join(config.root, config.tmpDir, 'code-machine'),
        //     env: {
        //         NODE_ENV: 'ide'
        //     }
        // });

        // // Stdout
        // cmProcess.stdout.pipe(process.stdout);
        // cmProcess.stderr.pipe(process.stdout);
    });

    /**
     * Compiles todos throughout the source code
     */
    gulp.task('dev:todo', 'Retrieve all todos to TODO.md file', function () {
        return gulp.src(config.jsDir.concat(config.lessDir).concat(config.htmlDir))
            .pipe($.todo({
                reporter: 'markdown',
            }))
            .pipe(gulp.dest(''));
    });

    /**
     * Serves the application client
     */
    gulp.task('serve:src', 'Serve the source code (for development)', function () {

        var bs = browserSync({
            port: 4000,
            server: {
                baseDir: 'src',
            },
            open: true,
            // tunnel: true
        });

        function notifyIsSrcServer() {
            bs.notify('<b>/src</b>', 3000);
        }

        bs.emitter.on('client:connected', notifyIsSrcServer);

        // Reload the server when the workspace is reset
        emitter.on('build:workspace', bs.reload);
    });

    /**
     * Serves the application client
     */
    gulp.task('serve:stage', 'Serve the staging environment', ['serve:code-machine'], function () {

        var bs = browserSync({
            port: 4001,
            server: {
                baseDir: 'stage',
                index: 'index.build.html'
            },
            serveStatic: [config.srcDir + '/' + config.mapsDir],
            open: true,
        });

        function notifyIsStagingServer() {
            bs.notify('<b>/stage</b>', 3000);
        }

        bs.emitter.on('client:connected', notifyIsStagingServer);
        // setTimeout(notifyIsStagingServer, 3000);
    });

    /**
     * Serves the application client
     */
    gulp.task('serve:dist', 'Serve the distribution environment', ['serve:code-machine'], function () {

        var bs = browserSync({
            port: 4002,
            server: {
                baseDir: 'dist',
                index: 'index.build.html'
            },
            open: true,
        });

        function notifyIsDistServer() {
            bs.notify('<b>/dist</b>', 3000);
        }

        bs.emitter.on('client:connected', notifyIsDistServer);
    });

    /**
     * Watches files for changes and acts accordingly
     */
    gulp.task('watch', 'Watch files for changes and reload servers', function () {

        // Message to be prepended to all .js files generated via less
        var message = [
            '/*-----------------------------------------------------',
            ' | This file was generated by Browserify.             |',
            ' | All modifications to it will be lost, mercilessly! |',
            ' -----------------------------------------------------*/\n\n',
        ].join('\n');

        // JS 
        gulp.watch(config.jsDir, ['jshint', 'jscs']);

        // Instantiate watchify
        var w = watchify(browserify(config.browserifyOptions));

        w.on('update', watchifyBundle); // on any dep update, runs the bundler
        w.on('log', $.util.log); // output build logs to terminal

        /**
         * Bundles browserify stack using watchify
         */
        function watchifyBundle() {
            return aux.vinylifyBrowserify(w)
                // optional, remove if you dont want sourcemaps
                .pipe($.sourcemaps.init({ loadMaps: true })) // loads map from browserify file
                    .on('end', browserSync.reload)
                .pipe($.sourcemaps.write(config.mapsDir)) // writes .map file
                .pipe($.header(message))
                .pipe(gulp.dest(config.srcDir))
                .pipe($.size({ title: 'javascript' }));
        }

        // HTML & web-components
        gulp.watch(config.htmlDir, ['jshint', 'jscs'])
            .on('change', browserSync.reload);

        // LESS
        gulp.watch(config.lessDir, ['less'])
            .on('change', function (event) {
                if (event.type === 'deleted') {

                    var p = path.parse(event.path);
                    var css = p.dir + '/' + p.name + '.css';

                    // Remove css file
                    del(css);
                }
            });
        gulp.watch(config.cssDir)
            .on('change', browserSync.reload);

        // Invoke watchify bundle once to start watching files
        // and return the stream in order to prevent subsequent
        // tasks from continuing without the browserify being complete
        // (crappish gulp+browserify+watchify integration)
        return watchifyBundle();
    });

    /**
     * Runs all tasks for development environment setup and go
     */
    gulp.task('develop', 'Set up development environment. If you are in doubt, try this one ;)', function (done) {
        // First compile less, run code-machine and watch 
        // then serve.
        runSequence(['less', 'javascript'], 'serve:src', 'watch', done);
    });

};