var path = require('path');

var browserify = require('browserify');
var polybuild  = require('polybuild');

var config  = require('./config');
var helpers = require('./helpers');

module.exports = function (gulp, $) {

    /**
     * Task for less.
     */
    gulp.task('less', function () {

        // Message to be prepended to all .css files generated via less
        var message = [
            '/*-----------------------------------------------------',
            ' | This file was generated by LESS.                   |',
            ' | All modifications to it will be lost, mercilessly! |',
            ' -----------------------------------------------------*/\n\n',
        ].join('\n');

        return gulp.src(config.lessDir)
            .pipe($.changed(config.srcDir, { extension: '.css' }))
            .pipe($.sourcemaps.init())
                .pipe($.less())
                .on('error', $.notify.onError({
                    title: 'Less compiling error',
                    message: '<%= error.message %>',
                    open: 'file:///<%= error.filename %>',
                    sound: 'Glass',
                    // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
                    // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
                    icon: path.join(config.root, 'logo.png'),
                }))
                .pipe($.autoprefixer({
                    browsers: [
                        'ie >= 10',
                        'ie_mob >= 10',
                        'ff >= 30',
                        'chrome >= 34',
                        'safari >= 7',
                        'opera >= 23',
                        'ios >= 7',
                        'android >= 4.4',
                        'bb >= 10'
                    ],
                    cascade: false,
                }))
                .pipe($.header(message))
            .pipe($.sourcemaps.write(config.mapsDir))
            // Put files at source dir in order to use them for vulcanization
            .pipe(gulp.dest(config.srcDir))
            .pipe($.size({
                title: 'less',
                showFiles: false
            }));
    });

    /**
     * Runs the javascript task once
     */
    gulp.task('javascript', 'Builds up the javascript file', function () {

        // Message to be prepended to all .js files generated via less
        var message = [
            '/*-----------------------------------------------------',
            ' | This file was generated by Browserify.             |',
            ' | All modifications to it will be lost, mercilessly! |',
            ' -----------------------------------------------------*/\n\n',
        ].join('\n');

        return helpers.vinylifyBrowserify(browserify(config.browserifyOptions))
            // optional, remove if you dont want sourcemaps
            .pipe($.sourcemaps.init({ loadMaps: true })) // loads map from browserify file
                // calculate size before writing source maps
                .pipe($.size({ title: 'javascript' }))
            // Add transformation tasks to the pipeline here.
            .pipe($.sourcemaps.write(config.mapsDir)) // writes .map file
            .pipe($.header(message))
            .pipe(gulp.dest(config.srcDir));
    });

    /**
     * Vulcanize polymer components (use polybuild instead)
     */
    // gulp.task('vulcanize', function () {
    //     return gulp.src(config.srcDir + '/elements.html')
    //         .pipe($.vulcanize({
    //             stripComments: true,
    //             inlineCss: true,
    //             inlineScripts: true,
    //         }))
    //         .pipe(gulp.dest(config.distDir))
    //         .pipe($.size({title: 'vulcanize'}));
    // });

    gulp.task('build:stage', 'Bundles all assets into files ready for stage-deployment', ['less', 'javascript'], function () {

        return gulp.src(config.srcDir + '/index.html')
            // maximumCrush should uglify the js
            .pipe(polybuild({ maximumCrush: true }))
            .pipe($.size({
                title: 'build:stage',
                showFiles: true,
                gzip: true
            }))
            .pipe(gulp.dest(config.stageDir));

    });

    gulp.task('build', 'Prepare dist', ['build:stage'], function () {

        var stageFiles = [
            config.stageDir + '/index.build.html',
            config.stageDir + '/index.build.js',
        ];

        return gulp.src(stageFiles, { baseDir: config.stageDir })
            // remove debugging (debugger, console.*, alert)
            .pipe($.if(helpers.isJs, $.stripDebug()))
            .pipe($.size({
                title: 'build',
                showFiles: true,
                gzip: true
            }))
            .pipe(gulp.dest(config.distDir));
    });
};